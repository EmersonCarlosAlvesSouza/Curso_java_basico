catch: tratamento de erro, exemplo:

int[] numeros = {4, 8, 16, 32, 64, 128};
int[] denominadores = {2, 0, 4, 8, 0, 2};
		
for(int i=0; i<numeros.length; i++) {
	System.out.println(numeros[i] + "/" + denominadores[i] + " = " + (numeros[i]/denominadores[i]));
}
output:
4/2 = 2
Exception in thread "main" java.lang.ArithmeticException: / by zero

Erro devido a divisão por 0, mas quando usamos o tratamento de erro fica assim:
int[] numeros = {4, 8, 16, 32, 64, 128};
		int[] denominadores = {2, 0, 4, 8, 0};
		
		for(int i=0; i<numeros.length; i++) {
			try {
				System.out.println(numeros[i] + "/" + denominadores[i] + " = " + (numeros[i]/denominadores[i]));	
			}catch (ArithmeticException e) {
				System.out.println("Divisão por 0");
			}
			
			
		}

output:
4/2 = 2
Divisão por 0
16/4 = 4
32/8 = 4
Divisão por 0
128/2 = 64


Para capturar um erro genérico podemos usar o 'Throwable':
catch (Throwable e){}

finally: usada em arquivos ou bando de dados. É sempre executada após o try ou cacth.
Ex:

int[] numeros = { 4, 8, 16, 32, 64, 128 };
int[] denominadores = { 2, 0, 4, 8, 0 };

for (int i = 0; i < numeros.length; i++) {
	try {
		System.out.println(numeros[i] + "/" + denominadores[i] + " = " + (numeros[i] / denominadores[i]));
	} catch (ArithmeticException e) {
		System.out.println("Divisão por 0");
	} catch (Throwable e) {
		System.out.println("Erro generico");
		}finally {
		System.out.println("Essa linha é impressa sempre após o try ou catch");
	}

}

output:
4/2 = 2
Essa linha é impressa sempre após o try ou catch
Divisão por 0
Essa linha é impressa sempre após o try ou catch
16/4 = 4
Essa linha é impressa sempre após o try ou catch
32/8 = 4
Essa linha é impressa sempre após o try ou catch
Divisão por 0
Essa linha é impressa sempre após o try ou catch
Erro generico
Essa linha é impressa sempre após o try ou catch



static como atributo:
Quando um atributo é declarado como static, ele pertence à classe em vez de pertencer a instâncias 
individuais da classe. Isso significa que, independentemente de quantas instâncias da classe Contato você 
criar, haverá apenas uma única cópia do atributo contador compartilhada por todas as instâncias.


	private int contador = 0;

No seu código atual, cada instância da classe Contato tem seu próprio contador. Isso significa que se 
você criar várias instâncias de Contato, cada uma terá seu próprio contador iniciado em 1. Isso pode não 
ser o comportamento desejado, especialmente se você deseja contar o número total de contatos criados em 
todas as instâncias da classe.

	private static int contador = 0;

Se você declarar contador como static, ele será compartilhado por todas as instâncias da classe Contato, 
e será incrementado sempre que uma nova instância for criada, garantindo que você tenha um contador único 
para o número total de contatos criados.

